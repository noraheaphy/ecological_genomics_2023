setwd("../data")
getwd()
# Read garden data --------------------------------------------------------
gardDat<-read.csv(file = "commonGarden.csv")
View(gardDat)
# Population and garden level models ------------------------------------------
summary(gardDat)
predictor<-c("rawClimDist","rawClimDist_sigma","Offset","Offset_sigma") # raw and scaled climate transfer distances and genomic offsets
garden<-c("MD","NC","VT")
# Prepare results table
results_garden<-data.frame(Predictor=character(0),Garden=character(0),
intercept_pop=numeric(0),slope_pop=numeric(0),R2_pop=numeric(0),R2adj_pop=numeric(0),
F_pop=numeric(0), numdf_pop=numeric(0), dendf_pop=numeric(0),
p_pop=numeric(0), AIC_pop=numeric(0))
View(results_garden)
for(i in 1:length(predictor)){
for(j in 1:length(garden)){
if(predictor[i]=="rawClimDist"){
LM<-lm(Growth~rawClimDist, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="rawClimDist_sigma"){
LM<-lm(Growth~rawClimDist_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset"){
LM<-lm(Growth~Offset, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset_sigma"){
LM<-lm(Growth~Offset_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
# Get stats
intercept_pop<-summary(LM)$coefficients[1,1]
slope_pop<-summary(LM)$coefficients[2,1]
R2_pop<-summary(LM)$r.squared
R2adj_pop<-summary(LM)$adj.r.squared
AIC_pop<-AIC(LM)
F_pop<-round(summary(LM)$fstatistic[1],3)
numdf_pop<-summary(LM)$fstatistic[2]
dendf_pop<-summary(LM)$fstatistic[3]
p_pop<-dropterm(LM,test="F")$'Pr(F)'[2]
# Store stats
results_garden<-rbind(pop_results_garden,data.frame(Predictor=predictor[i],Garden=garden[j],
intercept_pop=intercept_pop,slope_pop=slope_pop,R2_pop=R2_pop,R2adj_pop=R2adj_pop,
F_pop=F_pop, numdf_pop=numdf_pop, dendf_pop=dendf_pop,p_pop=p_pop, AIC_pop=AIC_pop))
# Store models
arr_models[[predictor[i], garden[j]]]<-LM
}
}
?drop.terms
install.packages("MASS")
# modified by Nora Heaphy on 9/19/23
library(MASS)
rm(ls = ())
rm(list = ls())
# modified by Nora Heaphy on 9/19/23
library(MASS)
# Read garden data --------------------------------------------------------
gardDat<-read.csv(file = "commonGarden.csv")
# Population and garden level models ------------------------------------------
summary(gardDat)
predictor<-c("rawClimDist","rawClimDist_sigma","Offset","Offset_sigma") # raw and scaled climate transfer distances and genomic offsets
garden<-c("MD","NC","VT")
# Make array to store models
arr_models <- array(list(type = any),c(length(predictor),length(garden)), dimnames=list(predictor, garden))
# Prepare results table
results_garden<-data.frame(Predictor=character(0),Garden=character(0),
intercept_pop=numeric(0),slope_pop=numeric(0),R2_pop=numeric(0),R2adj_pop=numeric(0),
F_pop=numeric(0), numdf_pop=numeric(0), dendf_pop=numeric(0),
p_pop=numeric(0), AIC_pop=numeric(0))
for(i in 1:length(predictor)){
for(j in 1:length(garden)){
if(predictor[i]=="rawClimDist"){
LM<-lm(Growth~rawClimDist, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="rawClimDist_sigma"){
LM<-lm(Growth~rawClimDist_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset"){
LM<-lm(Growth~Offset, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset_sigma"){
LM<-lm(Growth~Offset_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
# Get stats
intercept_pop<-summary(LM)$coefficients[1,1]
slope_pop<-summary(LM)$coefficients[2,1]
R2_pop<-summary(LM)$r.squared
R2adj_pop<-summary(LM)$adj.r.squared
AIC_pop<-AIC(LM)
F_pop<-round(summary(LM)$fstatistic[1],3)
numdf_pop<-summary(LM)$fstatistic[2]
dendf_pop<-summary(LM)$fstatistic[3]
p_pop<-dropterm(LM,test="F")$'Pr(F)'[2]
# Store stats
results_garden<-rbind(pop_results_garden,data.frame(Predictor=predictor[i],Garden=garden[j],
intercept_pop=intercept_pop,slope_pop=slope_pop,R2_pop=R2_pop,R2adj_pop=R2adj_pop,
F_pop=F_pop, numdf_pop=numdf_pop, dendf_pop=dendf_pop,p_pop=p_pop, AIC_pop=AIC_pop))
# Store models
arr_models[[predictor[i], garden[j]]]<-LM
}
}
rm(list = ls())
# Read garden data --------------------------------------------------------
gardDat<-read.csv(file = "commonGarden.csv")
# Population and garden level models ------------------------------------------
summary(gardDat)
predictor<-c("rawClimDist","rawClimDist_sigma","Offset","Offset_sigma") # raw and scaled climate transfer distances and genomic offsets
garden<-c("MD","NC","VT")
# Make array to store models
arr_models <- array(list(type = any),c(length(predictor),length(garden)), dimnames=list(predictor, garden))
# Prepare results table
results_garden<-data.frame(Predictor=character(0),Garden=character(0),
intercept_pop=numeric(0),slope_pop=numeric(0),R2_pop=numeric(0),R2adj_pop=numeric(0),
F_pop=numeric(0), numdf_pop=numeric(0), dendf_pop=numeric(0),
p_pop=numeric(0), AIC_pop=numeric(0))
for(i in 1:length(predictor)){
for(j in 1:length(garden)){
if(predictor[i]=="rawClimDist"){
LM<-lm(Growth~rawClimDist, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="rawClimDist_sigma"){
LM<-lm(Growth~rawClimDist_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset"){
LM<-lm(Growth~Offset, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset_sigma"){
LM<-lm(Growth~Offset_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
# Get stats
intercept_pop<-summary(LM)$coefficients[1,1]
slope_pop<-summary(LM)$coefficients[2,1]
R2_pop<-summary(LM)$r.squared
R2adj_pop<-summary(LM)$adj.r.squared
AIC_pop<-AIC(LM)
F_pop<-round(summary(LM)$fstatistic[1],3)
numdf_pop<-summary(LM)$fstatistic[2]
dendf_pop<-summary(LM)$fstatistic[3]
p_pop<-dropterm(LM,test="F")$'Pr(F)'[2]
# Store stats
results_garden<-rbind(results_garden,data.frame(Predictor=predictor[i],Garden=garden[j],
intercept_pop=intercept_pop,slope_pop=slope_pop,R2_pop=R2_pop,R2adj_pop=R2adj_pop,
F_pop=F_pop, numdf_pop=numdf_pop, dendf_pop=dendf_pop,p_pop=p_pop, AIC_pop=AIC_pop))
# Store models
arr_models[[predictor[i], garden[j]]]<-LM
}
}
View(arr_models)
View(gardDat)
View(results_garden)
rm(list = ls())
# Load data ---------------------------------------------------------------
# Selected climate variables:
selVarsSDM<- c("CMD","DD_0","DD18","eFFP","EXT","MAR","MSP","PAS","PET","RH","TD")
# Read red spruce occurence and climate data
dat_allClim<-read.csv(file = "clim_occurence_redSpruce.csv")
View(dat_allClim)
# Read garden data --------------------------------------------------------
gardDat<-read.csv(file = "commonGarden.csv")
View(dat_allClim)
View(gardDat)
predictor<-c("rawClimDist","rawClimDist_sigma","Offset","Offset_sigma") # raw and scaled climate transfer distances and genomic offsets
garden<-c("MD","NC","VT")
# Make array to store models
arr_models <- array(list(type = any),c(length(predictor),length(garden)), dimnames=list(predictor, garden))
# Prepare results table
results_garden<-data.frame(Predictor=character(0),Garden=character(0),
intercept_pop=numeric(0),slope_pop=numeric(0),R2_pop=numeric(0),R2adj_pop=numeric(0),
F_pop=numeric(0), numdf_pop=numeric(0), dendf_pop=numeric(0),
p_pop=numeric(0), AIC_pop=numeric(0))
for(i in 1:length(predictor)){
for(j in 1:length(garden)){
if(predictor[i]=="rawClimDist"){
LM<-lm(Growth~rawClimDist, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="rawClimDist_sigma"){
LM<-lm(Growth~rawClimDist_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset"){
LM<-lm(Growth~Offset, data=gardDat[gardDat$Garden==garden[j],])
}
if(predictor[i]=="Offset_sigma"){
LM<-lm(Growth~Offset_sigma, data=gardDat[gardDat$Garden==garden[j],])
}
# Get stats
intercept_pop<-summary(LM)$coefficients[1,1]
slope_pop<-summary(LM)$coefficients[2,1]
R2_pop<-summary(LM)$r.squared
R2adj_pop<-summary(LM)$adj.r.squared
AIC_pop<-AIC(LM)
F_pop<-round(summary(LM)$fstatistic[1],3)
numdf_pop<-summary(LM)$fstatistic[2]
dendf_pop<-summary(LM)$fstatistic[3]
p_pop<-dropterm(LM,test="F")$'Pr(F)'[2]
# Store stats
# N changed rbind(pop_results_garden) which doesn't exist to just results_garden
results_garden<-rbind(results_garden,data.frame(Predictor=predictor[i],Garden=garden[j],
intercept_pop=intercept_pop,slope_pop=slope_pop,R2_pop=R2_pop,R2adj_pop=R2adj_pop,
F_pop=F_pop, numdf_pop=numdf_pop, dendf_pop=dendf_pop,p_pop=p_pop, AIC_pop=AIC_pop))
# Store models
arr_models[[predictor[i], garden[j]]]<-LM
}
}
View(results_garden)
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(ape)
library(ggtree)
library(phytools)
getwd()
setwd("~/Desktop/01 projects/PBIO_6800_ecological_genomics/ecological_genomics_2023/PopGenomics/results/")
getwd()
list.files()
# First let's read in the diversity stats
theta <- read.table("2101_.thetas",sep="\t",header=T)
View(theta)
summary(theta)
theta$tWsite = theta$tW/theta$nSites #scales the theta-W by the number of sites
theta$tPsite = theta$tP/theta$nSites #scales the theta-Pi by the number of sites
View(theta)
head(theta[order(theta$Tajima, decreasing = TRUE),]) # top 10 Tajima's D values
head(theta[order(theta$Tajima, decreasing = FALSE),]) # bottom 10 Tajima's D values
theta[which(theta$Tajima>1.5 & theta$tPsite<0.001),]
sfs<-scan('9999_.sfs')
sfs<-scan('2101_.sfs')
sfs<-sfs[-c(1,which(sfs==0))]
sfs<-sfs/sum(sfs)
# Be sure to replace "9999" with your pop code in the "main" legend below
barplot(sfs,xlab = "Chromosomes",
names = 1:length(sfs),
ylab = "Proportions",
main = "Pop 2101 Site Frequency Spectrum",
col = 'blue')
# Put the nucleotide diversities, Tajima's D, and SFS into a 4-panel figure
par(mfrow = c(2,2))
hist(theta$tWsite, xlab = "theta-W", main = "Watterson's theta")
hist(theta$tPsite, xlab = "theta-Pi", main = "Pairwise Nucleotide Diversity")
hist(theta$Tajima, xlab = "D", main = "Tajima's D")
barplot(sfs, names = 1:length(sfs), main = 'Site Frequency Spectrum')
?avg
?mean
mean(theta$tWsite)
mean(theta$tPsite)
summary(theta)
View(theta)
head(theta[order(theta$Tajima, decreasing = TRUE),]) # top 10 Tajima's D values
head(theta[order(theta$Tajima, decreasing = FALSE),]) # bottom 10 Tajima's D values
# To reset the panel plotting, execute the line below:
dev.off()
# sum number of sites
sum(theta$nSites)
