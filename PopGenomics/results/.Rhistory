library(tidyverse)
library(ggplot2)
library(ape)
library(ggtree)
library(phytools)
getwd()
setwd("../../../publications_portulacineae/portulacineae_climate_niche/data")
getwd
getwd()
# load in tree
tree <- read.nexus("probable_final_tree_090822/MAP_consensus_ultrametric.nexus")
# load in non-subsetted data (GBIF)
data <- read.csv("tree_env_dat_050322.csv", header = TRUE, sep = ",",
na.strings = "")
data_non_subset <- read.csv("gbif_chelsa_merge_050222.csv", header = TRUE, sep = ",",
na.strings = "")
rm(list = ls())
# load in tree
tree <- read.nexus("probable_final_tree_090822/MAP_consensus_ultrametric.nexus")
# load in subsetted and non-subsetted occurrence data
data_sub <- read.csv("tree_env_dat_050322.csv", header = TRUE, sep = ",",
na.strings = "")
data_full <- read.csv("gbif_chelsa_merge_050222.csv", header = TRUE, sep = ",",
na.strings = "")
# convert species in tree and avgs to name form "Genus_species"
data_sub$species <- data_sub$species %>% str_replace(" ", "_")
data_full$species <- data_full$species %>% str_replace(" ", "_")
tree$tip.label <- tree$tip.label %>% str_replace("-", "_")
View(data_sub)
View(data_full)
summary(data_full)
# add n column to data_full
data_full$species <- as.factor(data_full$species)
group_by(data_full, species)
species_counts <- data_full %>% count(species)
data_full <- full_join(data_full, species_counts, by = "species", type = "left", match = "all")
View(species_counts)
?full_join
data_full <- full_join(data_full, species_counts, by = "species", type = "left")
data_full <- full_join(data_full, species_counts, by = "species", type = "left", match = "all",
relationship = "many-to-one")
data_full <- full_join(data_full, species_counts, by = "species", relationship = "many-to-one")
View(data_full)
rm(list = ls())
library(RcppCNPy) # for reading python numpy (.npy) files
setwd("Desktop/01_projects/PBIO_6800_ecological_genomics/ecological_genomics_2023/PopGenomics/results/")
getwd()
setwd(~)
setwd("~/")
getwd()
setwd("Desktop/01_projects/PBIO_6800_ecological_genomics/ecological_genomics_2023/PopGenomics/results/")
list.files()
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
plot(-log10(pval$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
# export outlier contigs
write.table(unique(outlier_contigs$chromo),
"allRS_poly_PC1_outlier_contigs.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
rm(list = ls())
s <- npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = c("p_PC1", "p_PC2")
## read positions
p <- read.table("allRS_poly_mafs.sites", sep = "\t", header = T, stringsAsFactors = T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval$p_PC1),
col = p_filtered$chromo,
xlab = "Position",
ylab = "-log10(p-value)",
main = "Selection outliers: pcANGSD e = 1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)), c("chromo", "position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff = 1e-3   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval < cutoff), c("chromo", "position")]
outlier_contigs
# get all the outliers with p-values below some cutoff
cutoff = 1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval < cutoff), c("chromo", "position")]
outlier_contigs
View(pval)
View(p_filtered)
View(pval)
# get all the outliers with p-values below some cutoff
cutoff = 1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval$p_PC1 < cutoff), c("chromo", "position")]
outlier_contigs
View(outlier_contigs)
View(pval)
getwd()
# export outlier contigs
write.table(unique(outlier_contigs$chromo),
"allRS_poly_PC1_outlier_contigs_1eneg4.txt",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
# get all the outliers with p-values below some cutoff
cutoff = 1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval$p_PC2 < cutoff), c("chromo", "position")]
outlier_contigs
# export outlier contigs
write.table(unique(outlier_contigs$chromo),
"allRS_poly_PC2_outlier_contigs_1eneg4.txt",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
# get all the outliers with p-values below some cutoff
cutoff = 1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval$p_PC1 < cutoff), c("chromo", "position")]
outlier_contigs
rm(list = ls())
