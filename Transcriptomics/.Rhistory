"bio7", "bio8", "bio9", "bio10", "bio11", "bio12", "bio13", "bio14", "bio15",
"bio16", "bio17", "bio18", "bio19", "adefi", "adefm", "adefx", "arid_i", "arid_m",
"arid_x", "c4gi", "evapi", "evapm", "evapx", "maxti",
"maxtm", "maxtx", "megagi", "mesogi", "microgi", "minti", "mintm", "mintx",
"pwat_i", "pwat_m", "pwat_x", "radni", "radnm", "radnx", "rhu215_i", "rhu215_m",
"rhu215_x", "rpreci", "rprecx", "rti_i", "rti_x", "rtx_i", "rtx_x", "spls_i",
"spls_m", "spls_x", "srain1", "srain1mp", "srain2", "srain2mp", "trnga", "trngi",
"trngm", "trngx", "wdef_i", "wdef_m", "wdef_x", "wpot_i", "wpot_m", "wpot_x")
colnames(australia) <- vec
View(australia)
pca <- PCA(australia[,-c(1:2)])
print(pca)
fviz_screeplot(pca, ncp = 10)
png(file = "../output/pca/aus_all_vars_screeplot.png", width = 20, height = 16, units = "cm",
res = 300)
fviz_screeplot(pca, ncp = 10)
dev.off()
plot(pca, choix = "var")
png(file = "../output/pca/aus_all_vars.png", width = 20, height = 16, units = "cm",
res = 300)
plot(pca, choix = "var")
dev.off()
PC1 <- pca$ind$coord[,1]
PC2 <- pca$ind$coord[,2]
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
png(file = "../output/pca/aus_all_vars_ellipse.png", width = 20, height = 16, units = "cm",
res = 300)
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
dev.off()
View(australia)
# test for correlated predictors
data_specs <- australia[,c(1:2)] # set aside species data for now
data_clim <- australia[,c(3:72)]
corr_matrix <- cor(data_clim)
highlyCorDescr <- findCorrelation(corr_matrix, cutoff = .8)
data_clim <- data_clim[,-highlyCorDescr]
data_sub_var <- bind_cols(data_specs, data_clim)
pca <- PCA(data_sub_var[,-c(1:2)])
View(data_sub_var)
View(corr_matrix)
fviz_screeplot(pca, ncp = 10)
png(file = "../output/pca/aus_sub_screeplot.png", width = 20, height = 16, units = "cm",
res = 300)
fviz_screeplot(pca, ncp = 10)
dev.off()
plot(pca, choix = "var")
png(file = "../output/pca/aus_sub_vars.png", width = 20, height = 16, units = "cm",
res = 300)
plot(pca, choix = "var")
dev.off()
PC1 <- pca$ind$coord[,1]
PC2 <- pca$ind$coord[,2]
png(file = "../output/pca/aus_sub_ellipse.png", width = 20, height = 16, units = "cm",
res = 300)
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
dev.off()
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
View(avgs)
View(australia)
# test for correlated predictors
data_specs <- australia[,c(1:2)] # set aside species data for now
data_clim <- australia[,c(22:72)]
View(data_clim)
corr_matrix <- cor(data_clim)
highlyCorDescr <- findCorrelation(corr_matrix, cutoff = .8)
data_clim <- data_clim[,-highlyCorDescr]
data_clim <- australia[,c(22:72)]
View(corr_matrix)
View(australia)
ggplot(australia, aes(x = adefi, y = arid_x, group = clade)) +
geom_line()
ggplot(australia, aes(x = adefi, y = arid_x, group = clade)) +
geom_point()
# bring in data
australia <- read.csv("1km_subset_aus_niche_050422.csv", header = T, sep = ",",
na.strings = "")
# extract genus information
australia$genus <- as.factor(australia$genus)
levels(australia$genus)
# select only species, clade, and environmental variables
australia <- australia %>% dplyr::select(species, genus, CHELSA_01:CHELSA_19)
# put variables in correct format
str(australia)
australia$species <- as.factor(australia$species)
# check for any rows with NAs (there shouldn't be any)
any(is.na(australia))
# standardize variable names for easier plotting
vec <- c("species", "clade", "bio1", "bio2", "bio3", "bio4", "bio5", "bio6",
"bio7", "bio8", "bio9", "bio10", "bio11", "bio12", "bio13", "bio14", "bio15",
"bio16", "bio17", "bio18", "bio19")
colnames(australia) <- vec
pca <- PCA(australia[,-c(1:2)])
fviz_screeplot(pca, ncp = 10)
png(file = "../output/pca/aus_all_vars_screeplot.png", width = 20, height = 16, units = "cm",
res = 300)
fviz_screeplot(pca, ncp = 10)
dev.off()
png(file = "../output/pca/aus_all_vars.png", width = 20, height = 16, units = "cm",
res = 300)
plot(pca, choix = "var")
dev.off()
PC1 <- pca$ind$coord[,1]
PC2 <- pca$ind$coord[,2]
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
png(file = "../output/pca/aus_all_vars_ellipse.png", width = 20, height = 16, units = "cm",
res = 300)
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
dev.off()
# test for correlated predictors
data_specs <- australia[,c(1:2)] # set aside species data for now
data_clim <- australia[,c(3:21)]
corr_matrix <- cor(data_clim)
highlyCorDescr <- findCorrelation(corr_matrix, cutoff = .8)
data_clim <- data_clim[,-highlyCorDescr]
data_sub_var <- bind_cols(data_specs, data_clim)
pca <- PCA(data_sub_var[,-c(1:2)])
fviz_screeplot(pca, ncp = 10)
png(file = "../output/pca/aus_sub_screeplot.png", width = 20, height = 16, units = "cm",
res = 300)
fviz_screeplot(pca, ncp = 10)
dev.off()
png(file = "../output/pca/aus_sub_vars.png", width = 20, height = 16, units = "cm",
res = 300)
plot(pca, choix = "var")
dev.off()
PC1 <- pca$ind$coord[,1]
PC2 <- pca$ind$coord[,2]
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
png(file = "../output/pca/aus_sub_ellipse.png", width = 20, height = 16, units = "cm",
res = 300)
ggplot(australia,
aes(x = PC1,
y = PC2,
color = clade)) +
stat_ellipse() +
labs(x = paste0("PC1: (",round(pca$eig[1,2],1),"%)"),
y = paste0("PC2: (",round(pca$eig[2,2],1),"%)"))
dev.off()
View(data_sub_var)
View(avgs)
rm(list = ls())
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)
getwd
getwd()
setwd("../../../PBIO_6800_ecological_genomics/ecological_genomics_2023/Transcriptomics/")
# Import the counts matrix
countsTable <- read.table("myresults/salmon.isoform.counts.matrix", header = TRUE, row.names = 1)
head(countsTable)
# Import the counts matrix
countsTable <- read.table("myresults/salmon.isoform.counts.matrix.filteredAssembly",
header = TRUE, row.names = 1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("myresults/ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
# Let's see how many reads we have from each sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg = colnames(countsTableRound),
cex.names = 0.5, las = 3, ylim = c(0,21000000))
abline(h = mean(colSums(countsTableRound)), col = "blue", lwd = 2)
# the average number of counts per gene
rowSums(countsTableRound)
mean(rowSums(countsTableRound)) # [1] 11930.81 - tonsa, 6076.078 - hudsonica genes, 2269 - hudsonica isoform
median(rowSums(countsTableRound)) # [1] 2226 - tonsa, 582 - hudsonica, 109
apply(countsTableRound, 2, mean) # 2 in the apply function does the action across columns
apply(countsTableRound, 1, mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRound, 1, mean), xlim = c(0,1000), ylim = c(0,120000), breaks = 10000)
hist(apply(countsTableRound, 1, mean), xlim = c(0,1000), ylim = c(0,45000), breaks = 10000)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds,
design = ~ generation + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 30) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
hist(apply(countsTableRound, 1, mean), xlim = c(0,1000), ylim = c(0,60000), breaks = 1000)
# List the results you've generated
resultsNames(dds)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds,
design = ~ generation + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 30) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
library(pheatmap)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds,
design = ~ generation + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
# List the results you've generated
resultsNames(dds)
View(countsTableRound)
# this gives log2(n + 1)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
# Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
meanSdPlot(assay(vsd))
library(RColorBrewer)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$treatment, vsd$generation, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
# first transform the data for plotting using variance stabilization
vsd <- vst(dds, blind = FALSE)
pcaData <- plotPCA(vsd, intgroup = c("treatment", "generation"), returnData = TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = treatment, shape = generation)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1],"% variance")) +
ylab(paste0("PC2: ", percentVar[2],"% variance")) +
coord_fixed()
data <- plotPCA(vsd, intgroup = c("treatment", "generation"), returnData = TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
dataF0 <- subset(data, generation == 'F0')
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size = 10, stroke = 1.5, aes(fill = treatment, shape = treatment)) +
xlab(paste0("PC1: ", percentVar[1],"% variance")) +
ylab(paste0("PC2: ", percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
#ylim(-40, 25) + xlim(-50, 50)+ # new assembly limits
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values = c(21,22,23,24), labels = c("Ambient", "Acidification","Warming",
"OWA"))+
scale_fill_manual(values = c('#6699CC', "#F2AD00", "#00A08A", "#CC3333"),
labels = c("Ambient", "Acidification","Warming", "OWA"))+
##theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
#guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
#guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
#guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F0
percentVar <- round(100 * attr(data, "percentVar"))
pcaData <- plotPCA(vsd, intgroup = c("treatment", "generation"), returnData = TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = treatment, shape = generation)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1],"% variance")) +
ylab(paste0("PC2: ", percentVar[2],"% variance")) +
coord_fixed()
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = treatment, shape = generation)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1],"% variance")) +
ylab(paste0("PC2: ", percentVar[2],"% variance")) +
coord_fixed()
dataF2 <- subset(data, generation == 'F2')
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill = treatment, shape = treatment)) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
# scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
#scale_color_manual(values=c('black')) +
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A"),
labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83, 0.85), legend.background = element_blank(),
legend.box.background = element_rect(colour = "black")) +
#scale_size(guide="none") +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F2
dataF4 <- subset(data, generation == 'F4')
F4 <- ggplot(dataF4, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+ # limits with filtered assembly
#ylim(-20, 10) + xlim(-40, 25)+  # zoom with filtered assembly
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
# scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
#scale_color_manual(values=c('black')) +
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
#theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
#scale_size(guide="none") +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F4
dataF11 <- subset(data, generation == 'F11')
F11 <- ggplot(dataF11, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,24), labels = c("Ambient", "OWA"))+
scale_fill_manual(values=c('#6699CC', "#CC3333"), labels = c("Ambient", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F11
dataF11 <- subset(data, generation == 'F11')
F11 <- ggplot(dataF11, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-45, 25) + xlim(-50, 55)+
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,24), labels = c("Ambient", "OWA"))+
scale_fill_manual(values=c('#6699CC', "#CC3333"), labels = c("Ambient", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F11
ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2)
resAM_OWA <- results(dds, name = "treatment_OWA_vs_AM", alpha = 0.05)
resAM_OWA <- resAM_OWA[order(resAM_OWA$padj),]
head(resAM_OWA)
summary(resAM_OWA)
resAM_OW <- results(dds, name = "treatment_OW_vs_AM", alpha = 0.05)
resAM_OW <- resAM_OW[order(resAM_OW$padj),]
head(resAM_OW)
summary(resAM_OW)
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene = "TRINITY_DN29_c1_g2::TRINITY_DN29_c1_g2_i3::g.747::m.747",
intgroup = (c("treatment", "generation")), returnData = TRUE)
d
p <-ggplot(d, aes(x = treatment, y = count, color = treatment, shape = generation)) +
theme_minimal() + theme(text = element_text(size=20),
panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position = position_jitter(w = 0.2, h = 0), size = 3)
p <- p + stat_summary(fun = mean, geom = "line")
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7)
p
View(F4)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds,
design= ~ treatment)
dim(dds)
# Filter
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Subset the DESeqDataSet to the specific level of the "generation" factor
dds_sub <- subset(dds, select = generation == 'F0')
dim(dds_sub)
# Perform DESeq2 analysis on the subset
dds_sub <- DESeq(dds_sub)
resultsNames(dds_sub)
res_F0_OWvAM <- results(dds_sub, name = "treatment_OW_vs_AM", alpha = 0.05)
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
summary(res_F0_OWvAM)
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <- plotCounts(dds_sub, gene = "TRINITY_DN30_c0_g2::TRINITY_DN30_c0_g2_i1::g.130::m.130",
intgroup = (c("treatment","generation")), returnData = TRUE)
d
p <- ggplot(d, aes(x = treatment, y = count, color = treatment, shape = generation)) +
theme_minimal() + theme(text = element_text(size=20),
panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position = position_jitter(w = 0.2, h = 0), size = 3)
p <- p + stat_summary(fun = mean, geom = "point", size = 5, alpha = 0.7)
p
# We can make an MA plot
plotMA(res_F0_OWvAM, ylim = c(-4,4))
# By environment
vsd <- vst(dds_sub, blind=FALSE)
topgenes <- head(rownames(res_F0_OWvAM),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds_sub)[,c("generation","treatment")])
pheatmap(mat, annotation_col = df)
pheatmap(mat, annotation_col = df, cluster_cols = F)
topgenes <- head(rownames(res_F0_OWvAM),100)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds_sub)[,c("generation","treatment")])
pheatmap(mat, annotation_col = df)
pheatmap(mat, annotation_col = df, cluster_cols = F)
install.packages("eulerr")
library(eulerr)
# For OW vs AM
res_F0_OWvAM <- results(dds_sub, name="treatment_OW_vs_AM", alpha=0.05)
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
summary(res_F0_OWvAM)
res_F0_OWvAM <- res_F0_OWvAM[!is.na(res_F0_OWvAM$padj),]
degs_F0_OWvAM <- row.names(res_F0_OWvAM[res_F0_OWvAM$padj < 0.05,])
# For OA vs AM
res_F0_OAvAM <- results(dds_sub, name="treatment_OA_vs_AM", alpha=0.05)
res_F0_OAvAM <- res_F0_OAvAM[order(res_F0_OAvAM$padj),]
head(res_F0_OAvAM)
summary(res_F0_OAvAM)
res_F0_OAvAM <- res_F0_OAvAM[!is.na(res_F0_OAvAM$padj),]
degs_F0_OAvAM <- row.names(res_F0_OAvAM[res_F0_OAvAM$padj < 0.05,])
# For OWA vs AM
res_F0_OWAvAM <- results(dds_sub, name="treatment_OWA_vs_AM", alpha=0.05)
res_F0_OWAvAM <- res_F0_OWAvAM[order(res_F0_OWAvAM$padj),]
head(res_F0_OWAvAM)
summary(res_F0_OWAvAM)
res_F0_OWAvAM <- res_F0_OWAvAM[!is.na(res_F0_OWAvAM$padj),]
degs_F0_OWAvAM <- row.names(res_F0_OWAvAM[res_F0_OWAvAM$padj < 0.05,])
# Total
length(degs_F0_OAvAM)  # 520
length(degs_F0_OWvAM)  # 4841
length(degs_F0_OWAvAM)  # 3742
length(degs_F0_OWAvAM)  # 3918
# Intersections
length(intersect(degs_F0_OAvAM,degs_F0_OWvAM))  # 387
length(intersect(degs_F0_OAvAM,degs_F0_OWAvAM))  # 340
length(intersect(degs_F0_OWAvAM,degs_F0_OWvAM))  # 2585
intWA <- intersect(degs_F0_OAvAM,degs_F0_OWvAM)
length(intersect(degs_F0_OWAvAM,intWA)) # 308
602-444-380+338 # 101 OA
5517-444-2743+338 # 2177 OW
3918-380-2743+338 # 1125 OWA
444-338 # 79 OA & OW
2743-338 # 2277 OWA & OW
380-338 # 32 OA & OWA
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("OA" = 116, "OW" = 2668, "OWA" = 1133, "OA&OW" = 106, "OA&OWA" = 42,
"OW&OWA" = 2405, "OA&OW&OWA" = 338))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot(fit1, quantities = TRUE, fill = "transparent",
lty = 1:3,
labels = list(font = 4))
plot(fit1,  lty = 1:3, quantities = TRUE)
116+106+338+42    # 520, total OA
#cross check
1133+42+338+2405 # 4841, total OW
106+338+2405+2668 # 3742, total OWA
